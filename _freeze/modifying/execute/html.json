{
  "hash": "359ec067f5202bb084733284896fcbf7",
  "result": {
    "markdown": "---\nknit: quarto render\n---\n\n# Modifying Values {#sec:modifying-values}\n\nAre you ready to play some games with your virtual deck? Not so fast! The point system in your deck of cards doesn't align well with many card games. For example, in war and poker, aces are usually scored higher than kings. They'd have a point value of 14, not 1. \n\nIn this task, you will change the point system of your deck three times to match three different games: war, hearts, and blackjack. Each of these games will teach you something different about modifying the values inside of a data set. Start by making a copy of `deck` that you can manipulate. This will ensure that you always have a pristine copy of `deck` to fall back on (should things go awry):\n\n```r\ndeck2 <- deck\n```\n## Changing Values in Place\n\nYou can use R's notation system to modify values within an R object. First, describe the value (or values) you wish to modify. Then use the assignment operator `<-` to overwrite those values. R will update the selected values _in the original object_. Let's put this into action with a real example:\n\n```r\nvec <- c(0, 0, 0, 0, 0, 0)\nvec\n##  0 0 0 0 0 0\n```\n\nHere's how you can select the first value of `vec`:\n\n```r\nvec[1]\n##  0\n```\n\nAnd here is how you can modify it:\n\n```r\nvec[1] <- 1000\nvec\n## 1000    0    0    0    0    0\n```\n\nYou can replace multiple values at once as long as the number of new values equals the number of selected values:\n\n```r\nvec[c(1, 3, 5)] <- c(1, 1, 1)\nvec\n##  1 0 1 0 1 0\n\nvec[4:6] <- vec[4:6] + 1\nvec\n## 1 0 1 1 2 1\n```\n\nYou can also create values that do not yet exist in your object. R will expand the object to accommodate the new values: \n\n```r\nvec[7] <- 0\nvec\n## 1 0 1 1 2 1 0\n```\n\nThis provides a great way to add new variables to your data set:\n\n```r\ndeck2$new <- 1:52\n\nhead(deck2)\n##   face   suit value new\n##   king spades    13   1\n##  queen spades    12   2\n##   jack spades    11   3\n##    ten spades    10   4\n##   nine spades     9   5\n##  eight spades     8   6\n```\n\nYou can also remove columns from a data frame (and elements from a list) by assigning them the symbol `NULL`:\n\n```r\ndeck2$new <- NULL\n\nhead(deck2)\n##   face   suit value\n##   king spades    13\n##  queen spades    12\n##   jack spades    11\n##    ten spades    10\n##   nine spades     9\n##  eight spades     8\n```\n\nIn the game of war, aces are king (figuratively speaking). They receive the highest value of all the cards, which would be something like 14. Every other card gets the value that it already has in `deck`. To play war, you just need to change the values of your aces from 1 to 14.\n\nAs long as you haven't shuffled your deck, you know just where the aces are. They appear every 13 cards. Hence, you can describe them with R's notation system:\n\n```r\ndeck2[c(13, 26, 39, 52), ]\n##  face     suit value\n##   ace   spades     1\n##   ace    clubs     1\n##   ace diamonds     1\n##   ace   hearts     1\n```\n\nYou can single out just the _values_ of the aces by subsetting the columns dimension of `deck2`. Or, even better, you can subset the column vector `deck2$value`:\n\n```r\ndeck2[c(13, 26, 39, 52), 3]\n## 1 1 1 1\n\ndeck2$value[c(13, 26, 39, 52)]\n## 1 1 1 1\n```\n\nNow all you have to do is assign a new set of values to these old values. The set of new values will have to be the same size as the set of values that you are replacing. So you could save `c(14, 14, 14, 14)` into the ace values, or you could just save *`14`* and rely on R's recycling rules to expand `14` to `c(14, 14, 14, 14)`:\n\n```r\ndeck2$value[c(13, 26, 39, 52)] <- c(14, 14, 14, 14)\n\n# or\n\ndeck2$value[c(13, 26, 39, 52)] <- 14\n```\n\nNotice that the values change _in place_. You don't end up with a modified _copy_ of `deck2`; the new values will appear inside `deck2`: \n\n```r\nhead(deck2, 13)\n##   face   suit value\n##   king spades    13\n##  queen spades    12\n##   jack spades    11\n##    ten spades    10\n##   nine spades     9\n##  eight spades     8\n##  seven spades     7\n##    six spades     6\n##   five spades     5\n##   four spades     4\n##  three spades     3\n##    two spades     2\n##    ace spades    14\n```\n\nThe same technique will work whether you store your data in a vector, matrix, array, list, or data frame. Just describe the values that you want to change with R's notation system, then assign over those values with R's assignment operator.\n\nThings worked very easily in this example because you knew exactly where each ace was. The cards were sorted in an orderly manner and an ace appeared every 13 rows. \n\nBut what if the deck had been shuffled? You could look through all the cards and note the locations of the aces, but that would be tedious. If your data frame were larger, it might be impossible: \n\n```r\ndeck3 <- shuffle(deck)\n```\n\nWhere are the aces now?\n\n```r\nhead(deck3)\n##  face     suit value\n## queen    clubs    12\n##  king    clubs    13\n##   ace   spades     1   # an ace\n##  nine    clubs     9\n## seven   spades     7\n## queen diamonds    12\n```\n\nWhy not ask R to find the aces for you? You can do this with logical subsetting. Logical subsetting provides a way to do targeted extraction and modification with R objects, a sort of search-and-destroy mission inside your own data sets. \n\n## Logical Subsetting\n\nDo you remember R's logical index system, [logicals](#sec:logicals)? To recap, you can select values with a vector of `TRUE`s and `FALSE`s. The vector must be the same length as the dimension that you wish to subset. R will return every element that matches a TRUE:\n\n```r\nvec\n## 1 0 1 1 2 1 0\n\nvec[c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)]\n## 2\n```\n\nAt first glance, this system might seem impractical. Who wants to type out long vectors of TRUEs and FALSEs? No one. But you don't have to. You can let a logical test create a vector of TRUEs and FALSEs for you.\n\n### Logical Tests\n\nA logical test is a comparison like \"is one less than two?\", `1 < 2`, or \"is three greater than four?\", `3 > 4`. R provides seven logical operators that you can use to make comparisons, shown in @tbl:logop. \n\nTable: R's Logical Operators {#tbl:logop}\n\n|Operator|Syntax|Tests\n|--------|------|-----\n|`>`|`a > b`|Is a greater than b?\n|`>=`|`a >= b`|Is a greater than or equal to b?\n|`<`|`a < b`|Is a less than b?\n|`<=`|`a <= b`|Is a less than or equal to b?\n|`==`|`a == b`|Is a equal to b?\n|`!=`|`a != b`|Is a not equal to b?\n|`%in%`|`a %in% c(a, b, c)`|Is a in the group c(a, b, c)? \n\nEach operator returns a `TRUE` or a `FALSE`. If you use an operator to compare vectors, R will do element-wise comparisonsâ€”just like it does with the arithmetic operators:\n\n```r\n1 > 2\n## FALSE\n\n1 > c(0, 1, 2)\n## TRUE FALSE FALSE\n\nc(1, 2, 3) == c(3, 2, 1)\n## FALSE  TRUE FALSE\n```\n\n`%in%` is the only operator that does not do normal element-wise execution. `%in%` tests whether the value(s) on the left side are in the vector on the right side. If you provide a vector on the left side, `%in%` will _not_ pair up the values on the left with the values on the right and then do element-wise tests. Instead, `%in%` will independently test whether each value on the left is _somewhere_ in the vector on the right: \n\n```r\n1 %in% c(3, 4, 5)\n## FALSE\n\nc(1, 2) %in% c(3, 4, 5)\n## FALSE FALSE\n\nc(1, 2, 3) %in% c(3, 4, 5)\n## FALSE FALSE  TRUE\n\nc(1, 2, 3, 4) %in% c(3, 4, 5)\n## FALSE FALSE  TRUE  TRUE\n```\n\nNotice that you test for equality with a double equals sign, `==`, and not a single equals sign, `=`, which is another way to write `<-`. It is easy to forget and use `a = b` to test if `a` equals `b`. Unfortunately, you'll be in for a nasty surprise. R won't return a `TRUE` or `FALSE`, because it won't have to: `a` _will_ equal `b`, because you just ran the equivalent of `a <- b`.\n\n::: {.callout-warning}\n## `=` is an assignment operator\n\nBe careful not to confuse `=` with `==`. `=` does the same thing as `<-`: it assigns a value to an object. \n:::\n\nYou can compare any two R objects with a logical operator; however, logical operators make the most sense if you compare two objects of the same data type. If you compare objects of different data types, R will use its coercion rules to coerce the objects to the same type before it makes the comparison.\n\n::: {#exr:how-many-aces name=\"How many Aces?\"}\nExtract the `face` column of `deck2` and test whether each value is equal to `ace`. As a challenge, use R to quickly count how many cards are equal to `ace`.\n:::\n  \n::: {.cell}\n\n```{.solution .cell-code}\nYou can extract the `face` column with R's `$` notation:\n```\n:::\n\n```r\ndeck2$face\n##  \"king\"  \"queen\" \"jack\"  \"ten\"   \"nine\" \n##  \"eight\" \"seven\" \"six\"   \"five\"  \"four\" \n##  \"three\" \"two\"   \"ace\"   \"king\"  \"queen\"\n##  \"jack\"  \"ten\"   \"nine\"  \"eight\" \"seven\"\n##  \"six\"   \"five\"  \"four\"  \"three\" \"two\"  \n##  \"ace\"   \"king\"  \"queen\" \"jack\"  \"ten\"  \n##  \"nine\"  \"eight\" \"seven\" \"six\"   \"five\" \n##  \"four\"  \"three\" \"two\"   \"ace\"   \"king\" \n##  \"queen\" \"jack\"  \"ten\"   \"nine\"  \"eight\"\n##  \"seven\" \"six\"   \"five\"  \"four\"  \"three\"\n##  \"two\"   \"ace\"\n```\n\nNext, you can use the `==` operator to test whether each value is equal to `ace`. In the following code, R will use its recycling rules to indivuidually compare every value of `deck2$face` to `\"ace\"`. Notice that the quotation marks are important. If you leave them out, R will try to find an object named `ace` to compare against `deck2$face`:\n\n```r\ndeck2$face == \"ace\"\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE FALSE  TRUE FALSE\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE  TRUE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE  TRUE\n```\n\nYou can use `sum` to quickly count the number of `TRUE`s in the previous vector. Remember that R will coerce logicals to numerics when you do math with them. R will turn `TRUE`s into ones and `FALSE`s into zeroes. As a result, sum will count the number of `TRUE`s:\n\n```r\nsum(deck2$face == \"ace\")\n## 4\n```\n\nYou can use this method to spot and then change the aces in your deckâ€”even if you've shuffled your cards. First, build a logical test that identifies the aces in your shuffled deck:\n\n```r\ndeck3$face == \"ace\"\n```\n\nThen use the test to single out the ace point values. Since the test returns a logical vector, you can use it as an index:\n\n```r\ndeck3$value[deck3$face == \"ace\"]\n##  1 1 1 1\n```\n\nFinally, use assignment to change the ace values in `deck3`:\n\n```r\ndeck3$value[deck3$face == \"ace\"] <- 14\n\nhead(deck3)\n##  face     suit value\n## queen    clubs    12\n##  king    clubs    13\n##   ace   spades    14  # an ace\n##  nine    clubs     9\n## seven   spades     7\n## queen diamonds    12\n```\n\nTo summarize, you can use a logical test to select values within an object.\n\nLogical subsetting is a powerful technique because it lets you quickly identify, extract, and modify individual values in your data set. When you work with logical subsetting, you do not need to know _where_ in your data set a value exists. You only need to know how to describe the value with a logical test. \n\nLogical subsetting is one of the things R does best. In fact, logical subsetting is a key component of vectorized programming, a coding style that lets you write fast and efficient R code, which we will study in [Speed](#sec:speed).\n\nLet's put logical subsetting to use with a new game: hearts. In hearts, every card has a value of zero:\n\n```r\ndeck4 <- deck\ndeck4$value <- 0\n\nhead(deck4, 13)\n##   face   suit value\n##   king spades     0\n##  queen spades     0\n##   jack spades     0\n##    ten spades     0\n##   nine spades     0\n##  eight spades     0\n##  seven spades     0\n##    six spades     0\n##   five spades     0\n##   four spades     0\n##  three spades     0\n##    two spades     0\n##    ace spades     0\n```\n\nexcept cards in the suit of hearts and the queen of spades. Each card in the suit of hearts has a value of 1. Can you find these cards and replace their values? Give it a try.\n\n::: {#exr:score-the-deck name=\"Score the Deck for Hearts\"}\nAssign a value of `1` to every card in `deck4` that has a suit of hearts.\n:::\n\n::: {.cell}\n\n```{.solution .cell-code}\nTo do this, first write a test that identifies cards in the `hearts` suit:\n```\n:::\n\n```r\ndeck4$suit == \"hearts\"\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n##   TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n##   TRUE  TRUE  TRUE\n```\n\nThen use your test to select the values of these cards:\n\n```r\ndeck4$value[deck4$suit == \"hearts\"]\n## 0 0 0 0 0 0 0 0 0 0 0 0 0\n```\n\nFinally, assign a new number to these values:\n\n```r\ndeck4$value[deck4$suit == \"hearts\"] <- 1\n```\n\nNow all of your `hearts` cards have been updated:\n\n```r\ndeck4$value[deck4$suit == \"hearts\"]\n## 1 1 1 1 1 1 1 1 1 1 1 1 1\n```\n\nIn hearts, the queen of spades has the most unusual value of all: she's worth 13 points. It should be simple to change her value, but she's surprisingly hard to find. You could find all of the _queens_:\n\n```r\ndeck4[deck4$face == \"queen\", ]\n##   face     suit value\n##  queen   spades     0\n##  queen    clubs     0\n##  queen diamonds     0\n##  queen   hearts     1\n```\n\nBut that's three cards too many. On the other hand, you could find all of the cards in _spades_: \n\n```r\ndeck4[deck4$suit == \"spades\", ]\n##   face   suit value\n##   king spades     0\n##  queen spades     0\n##   jack spades     0\n##    ten spades     0\n##   nine spades     0\n##  eight spades     0\n##  seven spades     0\n##    six spades     0\n##   five spades     0\n##   four spades     0\n##  three spades     0\n##    two spades     0\n##    ace spades     0\n```\n\nBut that's 12 cards too many. What you really want to find is all of the cards that have both a face value equal to queen and a suit value equal to spades. You can do that with a _Boolean operator_. Boolean operators combine multiple logical tests together into a single test.\n\n### Boolean Operators\n\nBoolean operators are things like _and_ (`&`) and _or_ (`|`). They collapse the results of multiple logical tests into a single `TRUE` or `FALSE`. R has six boolean operators, shown in @tbl:boole.\n\nTable: Boolean operators {#tbl:boole}\n\n|Operator|Syntax|Tests\n|--------|------|-----\n|`&`|`cond1 & cond2`|Are both `cond1` and `cond2` true?\n|`|`|`cond1 | cond2`|Is one or more of `cond1` and `cond2` true?\n|`xor`|`xor(cond1, cond2)`|Is exactly one of `cond1` and `cond2` true?\n|`!`|`!cond1`|Is `cond1` false? (e.g., `!` flips the results of a logical test)\n|`any`|`any(cond1, cond2, cond3, ...)`|Are any of the conditions true?\n|`all`|`all(cond1, cond2, cond3, ...)`|Are all of the conditions true?\n\nTo use a Boolean operator, place it between two _complete_ logical tests. R will execute each logical test and then use the Boolean operator to combine the results into a single `TRUE` or `FALSE`, @fig:boolean. \n\n::: {.callout-warning}\n## The most common mistake with Boolean operators\n  \nIt is easy to forget to put a complete test on either side of a Boolean operator. In English, it is efficient to say \"Is _x_ greater than two and less than nine?\" But in R, you need to write the equivalent of \"Is _x_ greater than two and _is x_ less than nine?\" This is shown in Figure \\@ref(fig:boolean).\n:::\n\n::: {.cell fig.alt='{}'}\n::: {.cell-output-display}\n![R will evaluate the expressions on each side of a Boolean operator separately, and then combine the results into a single TRUE or FALSE. If you do not supply a complete test to each side of the operator, R will return an error.](images/hopr_0501.png){#fig:boolean width=512}\n:::\n:::\n\nWhen used with vectors, Boolean operators will follow the same element-wise execution as arithmetic and logical operators:\n\n```r\na <- c(1, 2, 3)\nb <- c(1, 2, 3)\nc <- c(1, 2, 4)\n\na == b\n##  TRUE TRUE TRUE\n\nb == c\n##  TRUE  TRUE FALSE\n\na == b & b == c\n##  TRUE  TRUE FALSE\n```\n\nCould you use a Boolean operator to locate the queen of spades in your deck? Of course you can. You want to test each card to see if it is both a queen _and_ a spade. You can write this test in R with:\n\n```r\ndeck4$face == \"queen\" & deck4$suit == \"spades\"\n##  FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  FALSE FALSE FALSE\n```\n\nI'll save the results of this test to its own object. That will make the results easier to work with:\n\n```r\nqueenOfSpades <- deck4$face == \"queen\" & deck4$suit == \"spades\"\n```\n\nNext, you can use the test as an index to select the value of the queen of spades. Make sure the test actually selects the correct value: \n\n```r\ndeck4[queenOfSpades, ]\n##  face   suit value\n## queen spades     0\n\ndeck4$value[queenOfSpades]\n## 0\n```\n\nNow that you've found the queen of spades, you can update her value:\n\n```r\ndeck4$value[queenOfSpades] <- 13\n\ndeck4[queenOfSpades, ]\n##  face   suit value\n## queen spades     13\n```\n\nYour deck is now ready to play hearts.\n\n::: {#exr:practice-with-tests name=\"Practice with Tests\"}\nIf you think you have the hang of logical tests, try converting these sentences into tests written with R code. To help you out, I've defined some R objects after the sentences that you can use to test your answers: \n\n* Is w positive?\n* Is x greater than 10 and less than 20?\n* Is object y the word February?\n* Is _every_ value in z a day of the week?\n:::\n\n```r\nw <- c(-1, 0, 1)\nx <- c(5, 15)\ny <- \"February\"\nz <- c(\"Monday\", \"Tuesday\", \"Friday\")\n```\n\n::: {.cell}\n\n```{.solution .cell-code}\nHere are some model answers. If you got stuck, be sure to re-read how R evaluates logical tests that use Boolean values:\n```\n:::\n\n```r\nw > 0\n10 < x & x < 20\ny == \"February\"\nall(z %in% c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \n  \"Saturday\", \"Sunday\"))\n```\n\nLet's consider one last game, blackjack. In blackjack, each number card has a value equal to its face value. Each face card (king, queen, or jack) has a value of 10. Finally, each ace has a value of 11 or 1, depending on the final results of the game. \n\nLet's begin with a fresh copy of `deck`â€”that way the number cards (`two` through `ten`) will start off with the correct value:\n\n```r\ndeck5 <- deck\n\nhead(deck5, 13)\n##   king spades    13\n##  queen spades    12\n##   jack spades    11\n##    ten spades    10\n##   nine spades     9\n##  eight spades     8\n##  seven spades     7\n##    six spades     6\n##   five spades     5\n##   four spades     4\n##  three spades     3\n##    two spades     2\n##    ace spades     1\n```\n\nYou can change the value of the face cards in one fell swoop with `%in%`:\n\n```r\nfacecard <- deck5$face %in% c(\"king\", \"queen\", \"jack\")\n\ndeck5[facecard, ]\n##   face     suit value\n##   king   spades    13\n##  queen   spades    12\n##   jack   spades    11\n##   king    clubs    13\n##  queen    clubs    12\n##   jack    clubs    11\n##   king diamonds    13\n##  queen diamonds    12\n##   jack diamonds    11\n##   king   hearts    13\n##  queen   hearts    12\n##   jack   hearts    11\n\ndeck5$value[facecard] <- 10\n\nhead(deck5, 13)\n##   face   suit value\n##   king spades    10\n##  queen spades    10\n##   jack spades    10\n##    ten spades    10\n##   nine spades     9\n##  eight spades     8\n##  seven spades     7\n##    six spades     6\n##   five spades     5\n##   four spades     4\n##  three spades     3\n##    two spades     2\n##    ace spades     1\n```\n\nNow you just need to fix the ace valuesâ€”or do you? It is hard to decide what value to give the aces because their exact value will change from hand to hand. At the end of each hand, an ace will equal 11 if the sum of the player's cards does not exceed 21. Otherwise, the ace will equal 1. The actual value of the ace will depend on the other cards in the player's hand. This is a case of missing information. At the moment, you do not have enough information to assign a correct point value to the ace cards.\n\n## Missing Information {#sec:missing}\n\nMissing information problems happen frequently in data science. Usually, they are more straightforward: you don't know a value because the measurement was lost, corrupted, or never taken to begin with. R has a way to help you manage these missing values.\n\nThe `NA` character is a special symbol in R. It stands for \"not available\" and can be used as a placeholder for missing information. R will treat NA exactly as you should want missing information treated. For example, what result would you expect if you add 1 to a piece of missing information?\n\n```r\n1 + NA\n## NA\n```\n\nR will return a second piece of missing information. It would not be correct to say that `1 + NA = 1` because there is a good chance that the missing quantity is not zero. You do not have enough information to determine the result.\n\nWhat if you tested whether a piece of missing information is equal to 1?\n\n```r\nNA == 1\n## NA\n```\n\nAgain, your answer would be something like \"I do not know if this is equal to one,\" that is, `NA`. Generally, `NA`s will propagate whenever you use them in an R operation or function. This can save you from making errors based on missing data. \n\n### na.rm\n\nMissing values can help you work around holes in your data sets, but they can also create some frustrating problems. Suppose, for example, that you've collected 1,000 observations and wish to take their average with R's `mean` function. If even one of the values is `NA`, your result will be `NA`:\n\n```r\nc(NA, 1:50)\n## NA  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16\n## 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n## 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n\nmean(c(NA, 1:50))\n## NA\n```\n\nUnderstandably, you may prefer a different behavior. Most R functions come with the optional argument, `na.rm`, which stands for `NA` remove. R will ignore `NA`s when it evaluates a function if you add the argument `na.rm = TRUE`:\n\n```r\nmean(c(NA, 1:50), na.rm = TRUE)\n## 25.5\n```\n\n### is.na\n\nOn occasion, you may want to identify the `NA`s in your data set with a logical test, but that too creates a problem. How would you go about it? If something is a missing value, any logical test that uses it will return a missing value, even this test:\n\n```r\nNA == NA\n## NA\n```\n\nWhich means that tests like this won't help you find missing values:\n\n```r\nc(1, 2, 3, NA) == NA\n## NA NA NA NA\n```\n\nBut don't worry too hard; R supplies a special function that can test whether a value is an `NA`. The function is sensibly named `is.na`:\n\n```r\nis.na(NA)\n## TRUE\n\nvec <- c(1, 2, 3, NA)\nis.na(vec)\n## FALSE FALSE FALSE  TRUE\n```\n\n\nLet's set all of your ace values to `NA`. This will accomplish two things. First, it will remind you that you do not know the final value of each ace. Second, it will prevent you from accidentally scoring a hand that has an ace before you determine the ace's final value.\n\nYou can set your ace values to `NA` in the same way that you would set them to a number:\n\n```r\ndeck5$value[deck5$face == \"ace\"] <- NA\n\nhead(deck5, 13)\n##   face   suit value\n##   king spades    10\n##  queen spades    10\n##   jack spades    10\n##    ten spades    10\n##   nine spades     9\n##  eight spades     8\n##  seven spades     7\n##    six spades     6\n##   five spades     5\n##   four spades     4\n##  three spades     3\n##    two spades     2\n##    ace spades    NA\n```\n\nCongratulations. Your deck is now ready for a game of blackjack.\n\n## Summary\n\nYou can modify values in place inside an R object when you combine R's notation syntax with the assignment operator, `<-`. This lets you update your data and clean your data sets\n\nWhen you work with large data sets, modifying and retrieving values creates a logistical problem of its own. How can you search through the data to find the values that you want to modify or retrieve? As an R user, you can do this with logical subsetting. Create a logical test with logical and Boolean operators and then use the test as an index in R's bracket notation. R will return the values that you are looking for, even if you do not know where they are.\n\nRetrieving individual values will not be your only concern as an R programmer. You'll also need to retrieve entire data sets themselves; for example, you may call one in a function. [Environments](#sec:environments) will teach you how R looks up and saves data sets and other R objects in its environment system. You'll then use this knowledge to fix the `deal` and `shuffle` functions.",
    "supporting": [
      "modifying_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "dependencies": {
      "type": "includes",
      "data": []
    },
    "preserve": {}
  }
}