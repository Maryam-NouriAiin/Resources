{
  "hash": "07c16018f972cc4d99d517adc9afad08",
  "result": {
    "markdown": "---\nknit: quarto render\n---\n\n# Loops\n\nLoops are R's method for repeating a task, which makes them a useful tool for programming simulations. This chapter will teach you how to use R's loop tools.\n\nLet's use the `score` function to solve a real-world problem. \n\nYour slot machine is modeled after real machines that were accused of fraud. The machines appeared to pay out 40 cents on the dollar, but the manufacturer claimed that they paid out 92 cents on the dollar. You can calculate the exact payout rate of your machine with the `score` program. The payout rate will be the expected value of the slot machine's prize. \n\n## Expected Values\n\nThe expected value of a random event is a type of weighted average; it is the sum of each possible outcome of the event, weighted by the probability that each outcome occurs:\n\n$$\nE(x) = \\sum_{i = 1}^{n}\\left( x_{i} \\cdot P(x_{i}) \\right)\n$$\n\nYou can think of the expected value as the average prize that you would observe if you played the slot machine an infinite number of times. Let's use the formula to calculate some simple expected values. Then we will apply the formula to your slot machine.\n\nDo you remember the `die` you created in [Project 1: Weighted Dice]?\n\n```r\ndie <- c(1, 2, 3, 4, 5, 6)\n```\n\nEach time you roll the die, it returns a value selected at random (one through six). You can find the expected value of rolling the die with the formula:\n\n$$\nE(\\text{die}) = \\sum_{i = 1}^{n}\\left( \\text{die}_{i} \\cdot P(\\text{die}_{i}) \\right)\n$$\n\nThe $\\text{die}_{i}$s are the possible outcomes of rolling the die: 1, 2, 3, 4, 5, and 6; and the $P(\\text{die}_{i})$'s are the probabilities associated with each of the outcomes. If your die is fair, each outcome will occur with the same probability: 1/6. So our equation simplifies to: \n\n\n$$\n\\begin{array}{rl}\nE(\\text{die}) & = \\sum_{i = 1}^{n}\\left( \\text{die}_{i} \\cdot P(\\text{die}_{i}) \\right)\\\\\n& = 1 \\cdot \\frac{1}{6} +  2 \\cdot \\frac{1}{6} + 3 \\cdot \\frac{1}{6} + 4 \\cdot \\frac{1}{6} + 5 \\cdot \\frac{1}{6} + 6 \\cdot \\frac{1}{6}\\\\\n& = 3.5\\\\\n\\end{array}\n$$\n\nHence, the expected value of rolling a fair die is 3.5. You may notice that this is also the average value of the die. The expected value will equal the average if every outcome has the same chance of occurring. \n\nBut what if each outcome has a different chance of occurring? For example, we weighted our dice in [Packages and Help Pages] so that each die rolled 1, 2, 3, 4, and 5 with probability 1/8 and 6 with probability 3/8. You can use the same formula to calculate the expected value in these conditions:\n\n$$\n\\begin{array}{rl}\n  E(die) & = 1 \\cdot \\frac{1}{8} +  2 \\cdot \\frac{1}{8} + 3 \\cdot \\frac{1}{8} + 4 \\cdot \\frac{1}{8} + 5 \\cdot \\frac{1}{8} + 6 \\cdot \\frac{3}{8}\\\\\n  & = 4.125\\\\\n  \\end{array} \n$$\n\nHence, the expected value of a loaded die does not equal the average value of its outcomes. If you rolled a loaded die an infinite number of times, the average outcome would be 4.125, which is higher than what you would expect from a fair die.\n\nNotice that we did the same three things to calculate both of these expected values. We have:\n\n* Listed out all of the possible outcomes\n* Determined the _value_ of each outcome (here just the value of the die)\n* Calculated the probability that each outcome occurred\n\nThe expected value was then just the sum of the values in step 2 multiplied by the probabilities in step 3.\n\nYou can use these steps to calculate more sophisticated expected values. For example, you could calculate the expected value of rolling a pair of weighted dice. Let's do this step by step. \n\nFirst, list out all of the possible outcomes. A total of 36 different outcomes can appear when you roll two dice. For example, you might roll (1, 1), which notates one on the first die and one on the second die. Or, you may roll (1, 2), one on the first die and two on the second. And so on. Listing out these combinations can be tedious, but R has a function that can help.\n\n## expand.grid\n\nThe `expand.grid` function in R provides a quick way to write out every combination of the elements in _n_ vectors. For example, you can list every combination of two dice. To do so, run `expand.grid` on two copies of `die`: \n\n```r\nrolls <- expand.grid(die, die)\n```\n\n`expand.grid` will return a data frame that contains every way to pair an element from the first `die` vector with an element from the second `die` vector. This will capture all 36 possible combinations of values:\n\n```r\nrolls\n##    Var1 Var2\n## 1     1    1\n## 2     2    1\n## 3     3    1\n## ...\n## 34    4    6\n## 35    5    6\n## 36    6    6\n```\n\nYou can use `expand.grid` with more than two vectors if you like. For example, you could list every combination of rolling three dice with `expand.grid(die, die, die)` and every combination of rolling four dice with `expand.grid(die, die, die, die)`, and so on. `expand.grid` will always return a data frame that contains each possible combination of _n_ elements from the _n_ vectors. Each combination will contain exactly one element from each vector.\n\nYou can determine the value of each roll once you've made your list of outcomes. This will be the sum of the two dice, which you can calculate using R's element-wise execution: \n\n```r\nrolls$value <- rolls$Var1 + rolls$Var2\nhead(rolls, 3)\n## Var1 Var2 value\n##    1    1     2\n##    2    1     3\n##    3    1     4\n```\n\nR will match up the elements in each vector before adding them together. As a result, each element of `value` will refer to the elements of `Var1` and `Var2` that appear in the same row.\n\nNext, you must determine the probability that each combination appears. You can calculate this with a basic rule of probability:\n\n_The probability that_ n _independent, random events all occur is equal to the product of the probabilities that each random event occurs_. \n\nOr more succinctly:\n\n$$\nP(A \\& B \\& C \\& ...) = P(A) \\cdot P(B) \\cdot P(C) \\cdot ...\n$$\n\nSo the probability that we roll a (1, 1) will be equal to the probability that we roll a one on the first die, 1/8, times the probability that we roll a one on the second die, 1/8:\n\n$$\n\\begin{array}{rl}\nP(1 \\& 1) & = P(1) \\cdot P(1) \\\\\n& = \\frac{1}{8} \\cdot \\frac{1}{8}\\\\\n& = \\frac{1}{64}\n\\end{array}\n$$\n\nAnd the probability that we roll a (1, 2) will be: \n\n$$\n\\begin{array}{rl}\nP(1 \\& 2) & = P(1) \\cdot P(2) \\\\\n& = \\frac{1}{8} \\cdot \\frac{1}{8}\\\\\n& = \\frac{1}{64}\n\\end{array}\n$$\n\nAnd so on.\n\nLet me suggest a three-step process for calculating these probabilities in R. First, we can look up the probabilities of rolling the values in `Var1`. We'll do this with the lookup table that follows: \n\n```r\nprob <- c(\"1\" = 1/8, \"2\" = 1/8, \"3\" = 1/8, \"4\" = 1/8, \"5\" = 1/8, \"6\" = 3/8)\n\nprob\n##     1     2     3     4     5     6 \n## 0.125 0.125 0.125 0.125 0.125 0.375 \n```\n\nIf you subset this table by `rolls$Var1`, you will get a vector of probabilities perfectly keyed to the values of `Var1`:\n\n```r\nrolls$Var1\n## 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n\nprob[rolls$Var1]\n##     1     2     3     4     5     6     1     2     3     4     5     6 \n## 0.125 0.125 0.125 0.125 0.125 0.375 0.125 0.125 0.125 0.125 0.125 0.375 \n##     1     2     3     4     5     6     1     2     3     4     5     6 \n## 0.125 0.125 0.125 0.125 0.125 0.375 0.125 0.125 0.125 0.125 0.125 0.375 \n##     1     2     3     4     5     6     1     2     3     4     5     6 \n## 0.125 0.125 0.125 0.125 0.125 0.375 0.125 0.125 0.125 0.125 0.125 0.375 \n\nrolls$prob1 <- prob[rolls$Var1]\nhead(rolls, 3)\n## Var1 Var2 value prob1\n##    1    1     2 0.125\n##    2    1     3 0.125\n##    3    1     4 0.125\n```\n\nSecond, we can look up the probabilities of rolling the values in `Var2`:\n\n```r\nrolls$prob2 <- prob[rolls$Var2]\n\nhead(rolls, 3)\n## Var1 Var2 value prob1 prob2\n##    1    1     2 0.125 0.125\n##    2    1     3 0.125 0.125\n##    3    1     4 0.125 0.125\n```\n\nThird, we can calculate the probability of rolling each combination by multiplying `prob1` by `prob2`:\n\n```r\nrolls$prob <- rolls$prob1 * rolls$prob2\n\nhead(rolls, 3)\n## Var1 Var2 value prob1 prob2     prob\n##    1    1     2 0.125 0.125 0.015625\n##    2    1     3 0.125 0.125 0.015625\n##    3    1     4 0.125 0.125 0.015625\n```\n\nIt is easy to calculate the expected value now that we have each outcome, the value of each outcome, and the probability of each outcome. The expected value will be the summation of the dice values multiplied by the dice probabilities:\n\n```r\nsum(rolls$value * rolls$prob)\n## 8.25\n```\n\nSo the expected value of rolling two loaded dice is 8.25. If you rolled a pair of loaded dice an infinite number of times, the average sum would be 8.25. (If you are curious, the expected value of rolling a pair of fair dice is 7, which explains why 7 plays such a large role in dice games like craps.)\n\nNow that you've warmed up, let's use our method to calculate the expected value of the slot machine prize. We will follow the same steps we just took: \n\n* We will list out every possible outcome of playing the machine. This will be a list of every combination of three slot symbols.\n* We will calculate the probability of getting each combination when you play the machine.\n* We will determine the prize that we would win for each combination.\n\nWhen we are finished, we will have a data set that looks like this:\n\n```r\n## Var1 Var2 Var3 prob1 prob2 prob3     prob prize\n##   DD   DD   DD  0.03  0.03  0.03 0.000027   800\n##    7   DD   DD  0.03  0.03  0.03 0.000027     0\n##  BBB   DD   DD  0.06  0.03  0.03 0.000054     0\n## ... and so on.\n```\n\nThe expected value will then be the sum of the prizes multiplied by their probability of occuring:\n\n$$\nE(\\text{prize}) = \\sum_{i = 1}^{n}\\left( \\text{prize}_{i} \\cdot P(\\text{prize}_{i}) \\right)\n$$\n\nReady to begin?\n\n::: {.cell name='List the Combinations'}\n\n```{.exercise .cell-code}\nUse `expand.grid` to make a data frame that contains every possible combination of _three_ symbols from the `wheel` vector:\n```\n:::\n\n```r\nwheel <- c(\"DD\", \"7\", \"BBB\", \"BB\", \"B\", \"C\", \"0\")\n```\n\nBe sure to add the argument `stringsAsFactors = FALSE` to your `expand.grid` call; otherwise, `expand.grid` will save the combinations as factors, an unfortunate choice that will disrupt the `score` function.\n\n::: {.cell}\n\n```{.solution .cell-code}\nTo create a data frame of each combination of _three_ symbols, you need to run `expand.grid` and give it _three_ copies of `wheel`. The result will be a data frame with 343 rows, one for each unique combination of three slot symbols:\n```\n:::\n\n```r\ncombos <- expand.grid(wheel, wheel, wheel, stringsAsFactors = FALSE)\n\ncombos\n##   Var1 Var2 Var3\n## 1   DD   DD   DD\n## 2    7   DD   DD\n## 3  BBB   DD   DD\n## 4   BB   DD   DD\n## 5    B   DD   DD\n## 6    C   DD   DD\n## ...\n## 341    B    0    0\n## 342    C    0    0\n## 343    0    0    0\n```\n\nNow, let's calculate the probability of getting each combination. You can use the probabilities contained in the `prob` argument of `get_symbols` to do this. These probabilities determine how frequently each symbol is chosen when your slot machine generates symbols. They were calculated after observing 345 plays of the Manitoba video lottery terminals. Zeroes have the largest chance of being selected (0.52) and cherries the least (0.01):\n\n```r\nget_symbols <- function() {\n  wheel <- c(\"DD\", \"7\", \"BBB\", \"BB\", \"B\", \"C\", \"0\")\n  sample(wheel, size = 3, replace = TRUE, \n    prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52)\n}\n```\n\n\n::: {.cell name='Make a Lookup Table'}\n\n```{.exercise .cell-code}\nIsolate the previous probabilities in a lookup table. What names will you use in your table?\n```\n:::\n\n\n::: {.cell}\n\n```{.solution .cell-code}\nYour names should match the input that you want to look up. In this case, the input will be the character strings that appear in `Var1`, `Var2`, and `Var3`. So your lookup table should look like this:\n```\n:::\n\n```r\nprob <- c(\"DD\" = 0.03, \"7\" = 0.03, \"BBB\" = 0.06, \n  \"BB\" = 0.1, \"B\" = 0.25, \"C\" = 0.01, \"0\" = 0.52)\n```\n\nNow let's look up our probabilities.\n\n::: {.cell name='Lookup the Probabilities'}\n\n```{.exercise .cell-code}\nLook up the probabilities of getting the values in `Var1`. Then add them to `combos` as a column named `prob1`. Then do the same for `Var2` (`prob2`) and `Var3` (`prob3`). \n```\n:::\n\n\n::: {.cell}\n\n```{.solution .cell-code}\nRemember that you use R's selection notation to look up values in a lookup table. The values that result will be keyed to the index that you use:\n```\n:::\n\n```r\ncombos$prob1 <- prob[combos$Var1]\ncombos$prob2 <- prob[combos$Var2]\ncombos$prob3 <- prob[combos$Var3]\n\nhead(combos, 3)\n## Var1 Var2 Var3 prob1 prob2 prob3\n##   DD   DD   DD  0.03  0.03  0.03\n##    7   DD   DD  0.03  0.03  0.03\n##  BBB   DD   DD  0.06  0.03  0.03\n```\n\nNow how should we calculate the total probability of each combination? Our three slot symbols are all chosen independently, which means that the same rule that governed our dice probabilities governs our symbol probabilities:\n\n$$\nP(A \\& B \\& C \\& ...) = P(A) \\cdot P(B) \\cdot P(C) \\cdot ...\n$$\n\n::: {.cell name='Calculate Probabilities for Each Combination'}\n\n```{.exercise .cell-code}\nCalculate the overall probabilities for each combination. Save them as a column named `prob` in `combos`, then check your work. \n\nYou can check that the math worked by summing the probabilities. The probabilities should add up to one, because one of the combinations _must_ appear when you play the slot machine. In other words, a combination will appear, with probability of one.\n```\n:::\n\nYou can calculate the probabilities of every possible combination in one fell swoop with some element-wise execution: \n\n```r\ncombos$prob <- combos$prob1 * combos$prob2 * combos$prob3\n\nhead(combos, 3)\n## Var1 Var2 Var3 prob1 prob2 prob3     prob\n##   DD   DD   DD  0.03  0.03  0.03 0.000027\n##    7   DD   DD  0.03  0.03  0.03 0.000027\n##  BBB   DD   DD  0.06  0.03  0.03 0.000054\n```\n\nThe sum of the probabilities is one, which suggests that our math is correct:\n\n```r\nsum(combos$prob)\n## 1\n```\n\nYou only need to do one more thing before you can calculate the expected value: you must determine the prize for each combination in `combos`. You can calculate the prize with `score`. For example, we can calculate the prize for the first row of `combos` like this:\n\n```r\nsymbols <- c(combos[1, 1], combos[1, 2], combos[1, 3])\n## \"DD\" \"DD\" \"DD\"\n\nscore(symbols)\n## 800\n```\n\nHowever there are 343 rows, which makes for tedious work if you plan to calculate the scores manually. It will be quicker to automate this task and have R do it for you, which you can do with a `for` loop.  \n  \n\n## for Loops\n\nA `for` loop repeats a chunk of code many times, once for each element in a set of input. `for` loops provide a way to tell R, \"Do this for every value of that.\" In R syntax, this looks like:\n\n```r\nfor (value in that) {\n  this\n}\n```\n\nThe `that` object should be a set of objects (often a vector of numbers or character strings). The for loop will run the code in that appears between the braces once for each member of `that`. For example, the for loop below runs `print(\"one run\")` once for each element in a vector of character strings:\n\n```r\nfor (value in c(\"My\", \"first\", \"for\", \"loop\")) {\n  print(\"one run\")\n}\n## \"one run\"\n## \"one run\"\n## \"one run\"\n## \"one run\"\n```\n\nThe `value` symbol in a for loop acts like an argument in a function. The for loop will create an object named `value` and assign it a new value on each run of the loop. The code in your loop can access this value by calling the `value` object.\n\nWhat values will the for loop assign to `value`? It will use the elements in the set that you run the loop on. `for` starts with the first element and then assigns a different element to `value` on each run of the for loop, until all of the elements have been assigned to `value`. For example, the for loop below will run `print(value)` four times and will print out one element of `c(\"My\", \"second\", \"for\", \"loop\")` each time:\n\n```r\nfor (value in c(\"My\", \"second\", \"for\", \"loop\")) {\n  print(value)\n}\n## \"My\"\n## \"second\"\n## \"for\"\n## \"loop\"\n```\n\nOn the first run, the for loop substituted `\"My\"` for `value` in `print(value)`. On the second run it substituted `\"second\"`, and so on until `for` had run `print(value)` once with every element in the set: \n\nIf you look at `value` after the loop runs, you will see that it still contains the value of the last element in the set:\n\n```r\nvalue\n## \"loop\"\n```\n\nI've been using the symbol `value` in my for loops, but there is nothing special about it. You can use any symbol you like in your loop to do the same thing as long as the symbol appears before `in` in the parentheses that follow `for`. For example, you could rewrite the previous loop with any of the following:\n\n```r\nfor (word in c(\"My\", \"second\", \"for\", \"loop\")) {\n  print(word)\n}\nfor (string in c(\"My\", \"second\", \"for\", \"loop\")) {\n  print(string)\n}\nfor (i in c(\"My\", \"second\", \"for\", \"loop\")) {\n  print(i)\n}\n```\n\n::: {.cell type='rmdwarning'}\n\\BeginKnitrBlock{rmdwarning}<div class=\"rmdwarning\">**Choose your symbols carefully**\n  \nR will run your loop in whichever environment you call it from. This is bad news if your loop uses object names that already exist in the environment. Your loop will overwrite the existing objects with the objects that it creates. This applies to the value symbol as well.</div>\\EndKnitrBlock{rmdwarning}\n:::\n\n\n::: {.cell type='rmdtip'}\n\\BeginKnitrBlock{rmdtip}<div class=\"rmdtip\">**For loops run on sets**\n  \nIn many programming languages, `for` loops are designed to work with integers, not sets. You give the loop a starting value and an ending value, as well as an increment to advance the value by between loops. The `for` loop then runs until the loop value exceeds the ending value. \n\nYou can recreate this effect in R by having a `for` loop execute on a set of integers, but don't lose track of the fact that R's `for` loops execute on members of a set, not sequences of integers.</div>\\EndKnitrBlock{rmdtip}\n:::\n\n`for` loops are very useful in programming because they help you connect a piece of code with each element in a set. For example, we could use a `for` loop to run `score` once for each row in `combos`. However, R's `for` loops have a shortcoming that you'll want to know about before you start using them: `for` loops do not return output.\n\n`for` loops are like Las Vegas: what happens in a `for` loop stays in a `for` loop. If you want to use the products of a `for` loop, you must write the `for` loop so that it saves its own output as it goes. \n\nOur previous examples appeared to return output, but this was misleading. The examples worked because we called `print`, which always prints its arguments in the console (even if it is called from a function, a `for` loop, or anything else). Our `for` loops won't return anything if you remove the `print` call:\n\n```r\nfor (value in c(\"My\", \"third\", \"for\", \"loop\")) {\n  value\n}\n##\n```\n\nTo save output from a `for` loop, you must write the loop so that it saves its own output as it runs. You can do this by creating an empty vector or list before you run the `for` loop. Then use the `for` loop to fill up the vector or list. When the `for` loop is finished, you'll be able to access the vector or list, which will now have all of your results.\n\nLet's see this in action. The following code creates an empty vector of length 4:\n\n```r\nchars <- vector(length = 4)\n```\n\nThe next loop will fill it with strings:\n\n```r\nwords <- c(\"My\", \"fourth\", \"for\", \"loop\")\n\nfor (i in 1:4) {\n  chars[i] <- words[i]\n}\n\nchars\n## \"My\"    \"fourth\" \"for\"   \"loop\"\n```\n\nThis approach will usually require you to change the sets that you execute your `for` loop on. Instead of executing on a set of objects, execute on a set of integers that you can use to index both your object and your storage vector. This approach is very common in R. You'll find in practice that you use `for` loops not so much to run code, but to fill up vectors and lists with the results of code. \n\nLet's use a `for` loop to calculate the prize for each row in `combos`. To begin, create a new column in `combos` to store the results of the `for` loop:\n\n```r\ncombos$prize <- NA\n\nhead(combos, 3)\n##  Var1 Var2 Var3 prob1 prob2 prob3     prob prize\n##    DD   DD   DD  0.03  0.03  0.03 0.000027    NA\n##     7   DD   DD  0.03  0.03  0.03 0.000027    NA\n##   BBB   DD   DD  0.06  0.03  0.03 0.000054    NA\n```\n\nThe code creates a new column named prize and fills it with `NA`s. R uses its recycling rules to populate every value of the column with `NA`. \n\n::: {.cell name='Build a Loop'}\n\n```{.exercise .cell-code}\nConstruct a `for` loop that will run `score` on all 343 rows of `combos`. The loop should run `score` on the first three entries of the _i_th row of `combos` and should store the results in the _i_th entry of `combos$prize`.\n```\n:::\n\n::: {.cell}\n\n```{.solution .cell-code}\nYou can score the rows in `combos` with: \n```\n:::\n\n```r\nfor (i in 1:nrow(combos)) {\n  symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])\n  combos$prize[i] <- score(symbols)\n}\n```\n\nAfter you run the for loop, `combos$prize` will contain the correct prize for each row. This exercise also tests the `score` function; `score` appears to work correctly for every possible slot combination:\n\n```r\nhead(combos, 3)\n## Var1 Var2 Var3 prob1 prob2 prob3     prob prize\n##   DD   DD   DD  0.03  0.03  0.03 0.000027   800\n##    7   DD   DD  0.03  0.03  0.03 0.000027     0\n##  BBB   DD   DD  0.06  0.03  0.03 0.000054     0\n```\n\nWe're now ready to calculate the expected value of the prize. The expected value is the sum of `combos$prize` weighted by `combos$prob`. This is also the payout rate of the slot machine: \n\n```r\nsum(combos$prize * combos$prob)\n## 0.538014\n```\n\nUh oh. The expected prize is about 0.54, which means our slot machine only pays 54 cents on the dollar over the long run. Does this mean that the manufacturer of the Manitoba slot machines _was_ lying?\n\nNo, because we ignored an important feature of the slot machine when we wrote `score`: a diamond is wild. You can treat a `DD` as any other symbol if it increases your prize, with one exception. You cannot make a `DD` a `C` unless you already have another `C` in your symbols (it'd be too easy if every `DD` automatically earned you $2). \n\nThe best thing about `DD`s is that their effects are cumulative. For example, consider the combination `B`, `DD`, `B`. Not only does the `DD` count as a `B`, which would earn a prize of $10; the `DD` also doubles the prize to $20.\n\nAdding this behavior to our code is a little tougher than what we have done so far, but it involves all of the same principles. You can decide that your slot machine doesn't use wilds and keep the code that we have. In that case, your slot machine will have a payout rate of about 54 percent. Or, you could rewrite your code to use wilds. If you do, you will find that your slot machine has a payout rate of 93 percent, one percent higher than the manufacturer's claim. You can calculate this rate with the same method that we used in this section.\n\n::: {.cell name='Challenge'}\n\n```{.exercise .cell-code}\nThere are many ways to modify `score` that would count `DD`s as wild. If you would like to test your skill as an R programmer, try to write your own version of `score` that correctly handles diamonds.\n\nIf you would like a more modest challenge, study the following `score` code. It accounts for wild diamonds in a way that I find elegant and succinct. See if you can understand each step in the code and how it achieves its result.\n```\n:::\n\n\n::: {.cell}\n\n```{.solution .cell-code}\nHere is a version of score that handles wild diamonds:\n```\n:::\n\n```r\nscore <- function(symbols) {\n  \n  diamonds <- sum(symbols == \"DD\")\n  cherries <- sum(symbols == \"C\")\n  \n  # identify case\n  # since diamonds are wild, only nondiamonds \n  # matter for three of a kind and all bars\n  slots <- symbols[symbols != \"DD\"]\n  same <- length(unique(slots)) == 1\n  bars <- slots %in% c(\"B\", \"BB\", \"BBB\")\n\n  # assign prize\n  if (diamonds == 3) {\n    prize <- 100\n  } else if (same) {\n    payouts <- c(\"7\" = 80, \"BBB\" = 40, \"BB\" = 25,\n      \"B\" = 10, \"C\" = 10, \"0\" = 0)\n    prize <- unname(payouts[slots[1]])\n  } else if (all(bars)) {\n    prize <- 5\n  } else if (cherries > 0) {\n    # diamonds count as cherries\n    # so long as there is one real cherry\n    prize <- c(0, 2, 5)[cherries + diamonds + 1]\n  } else {\n    prize <- 0\n  }\n  \n  # double for each diamond\n  prize * 2^diamonds\n}\n```\n\n\n::: {.cell name='Calculate the Expected Value'}\n\n```{.exercise .cell-code}\nCalculate the expected value of the slot machine when it uses the new `score` function. You can use the existing `combos` data frame, but you will need to build a `for` loop to recalculate `combos$prize`.\n```\n:::\n\nTo update the expected value, just update `combos$prize`:\n\n```r\nfor (i in 1:nrow(combos)) {\n  symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])\n  combos$prize[i] <- score(symbols)\n}\n```\n\nThen recompute the expected value:\n\n```r\nsum(combos$prize * combos$prob)\n## 0.934356\n```\n\nThis result vindicates the manufacturer's claim. If anything, the slot machines seem more generous than the manufacturer stated.\n\n## while Loops\n\nR has two companions to the `for` loop: the `while` loop and the `repeat` loop. A `while` loop reruns a chunk _while_ a certain condition remains `TRUE`. To create a `while` loop, follow `while` by a condition and a chunk of code, like this:\n\n```r\nwhile (condition) {\n  code\n}\n```\n\n`while` will rerun `condition`, which should be a logical test, at the start of each loop. If `condition` evaluates to `TRUE`, `while` will run the code between its braces. If `condition` evaluates to `FALSE`, `while` will finish the loop. \n\nWhy might `condition` change from `TRUE` to `FALSE`? Presumably because the code inside your loop has changed whether the condition is still `TRUE`. If the code has no relationship to the condition, a `while` loop will run until you stop it. So be careful. You can stop a `while` loop by hitting Escape or by clicking on the stop-sign icon at the top of the RStudio console pane. The icon will appear once the loop begins to run.\n\nLike `for` loops, `while` loops do not return a result, so you must think about what you want the loop to return and save it to an object during the loop.\n\nYou can use `while` loops to do things that take a varying number of iterations, like calculating how long it takes to go broke playing slots (as follows). However, in practice, `while` loops are much less common than `for` loops in R:\n\n```r\nplays_till_broke <- function(start_with) {\n  cash <- start_with\n  n <- 0\n  while (cash > 0) {\n    cash <- cash - 1 + play()\n    n <- n + 1\n  }\n  n\n}\n\nplays_till_broke(100)\n## 260\n```\n\n## repeat Loops\n\n`repeat` loops are even more basic than `while` loops. They will repeat a chunk of code until you tell them to stop (by hitting Escape) or until they encounter the command `break`, which will stop the loop.\n\nYou can use a `repeat` loop to recreate `plays_till_broke`, my function that simulates how long it takes to lose money while playing slots: \n\n```r\nplays_till_broke <- function(start_with) {\n  cash <- start_with\n  n <- 0\n  repeat {\n    cash <- cash - 1 + play()\n    n <- n + 1\n    if (cash <= 0) {\n      break\n    }\n  }\n  n\n}\n\nplays_till_broke(100)\n## 237\n```\n\n## Summary\n\nYou can repeat tasks in R with `for`, `while`, and `repeat` loops. To use `for`, give it a chunk of code to run and a set of objects to loop through. `for` will run the code chunk once for each object. If you wish to save the output of your loop, you can assign it to an object that exists outside of the loop.\n\nRepetition plays an important role in data science. It is the basis for simulation, as well as for estimates of variance and probability. Loops are not the only way to create repetition in R (consider `replicate` for example), but they are one of the most popular ways.\n\nUnfortunately, loops in R can sometimes be slower than loops in other languages. As a result, R's loops get a bad rap. This reputation is not entirely deserved, but it does highlight an important issue. Speed is essential to data analysis. When your code runs fast, you can work with bigger data and do more to it before you run out of time or computational power. [Speed] will teach you how to write fast `for` loops and fast code in general with R. There, you will learn to write vectorized code, a style of lightning-fast code that takes advantage of all of R's strengths.",
    "supporting": [
      "loops_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "dependencies": {
      "type": "includes",
      "data": []
    },
    "preserve": {}
  }
}